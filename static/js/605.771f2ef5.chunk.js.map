{"version":3,"file":"static/js/605.771f2ef5.chunk.js","mappings":"yIAQA,SAASA,EAAcC,GAA6B,IAA5B,MAAEC,EAAK,OAAEC,EAAM,OAAEC,GAAQH,EAChD,OACCI,EAAAA,EAAAA,KAAA,OACCC,MAAO,CACNC,gBAAiBL,EACjBM,OAAQ,qCACRC,YAAa,IACbN,SACAO,aAAc,MACdN,SACAO,UAAW,iCAIf,CAEAX,EAAeY,aAAe,CAC7BV,MAAO,cACPC,OAAQ,SACRC,OAAQ,KAGT,S,6NCIA,QA/BA,SAAqBH,GAAW,IAAV,IAAEY,GAAKZ,EAC5B,MAAOa,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,WAAS,GAWnC,OACCG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUrB,OAAQ,KAAMsB,SAAA,CACxFX,IAAWT,EAAAA,EAAAA,KAACqB,EAAAA,EAAgB,IAC5BT,GACAZ,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,MAAM,QAAOuB,SAAC,iCAE1BpB,EAAAA,EAAAA,KAAA,OACCuB,IAAG,qGAAAC,OAAuGhB,GAC1GiB,IAAI,UACJC,OAlBeC,KAClBjB,GAAW,EAAM,EAkBdkB,QAfgBC,KACnBnB,GAAW,GACXG,GAAS,EAAK,EAcXZ,MAAO,CAAEgB,QAASR,EAAU,OAAS,QAASqB,SAAU,OAAQC,UAAW,YAKhF,E,wBCNA,MAAMC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAcrC,IAAA,IAAC,MAAEuC,GAAOvC,EAAA,MAAM,CAClDM,gBAAiB,qBACjBI,UAAW,kCACX8B,WAAY,8BACZ,UAAW,CACV9B,UAAW,mCAEZ,IAEK+B,GAAmBJ,EAAAA,EAAAA,IAAOK,EAAAA,EAAPL,EAAeM,IAAA,IAAC,MAAEJ,GAAOI,EAAA,MAAM,CACvDC,WAAY,mDACZrC,OAAQ,EACRE,aAAc,EACdC,UAAW,sCACXT,MAAO,UACPC,OAAQ,GACR2C,QAAS,SACTL,WAAY,uBACZ,UAAW,CACV9B,UAAW,wCAEZ,IAyRD,QAvRA,WACC,MAAOoC,EAAWC,IAAgBhC,EAAAA,EAAAA,UAAS,KACpCiC,EAAkBC,IAAuBlC,EAAAA,EAAAA,UAAS,OAClDmC,EAAcC,IAAmBpC,EAAAA,EAAAA,UAAS,KAC1CqC,EAAoBC,IAAyBtC,EAAAA,EAAAA,WAAS,GA4DvDuC,EAAWA,CAACC,EAAOC,KACxB,MAAMC,EA3DiBC,KACvB,MAAMC,EAAW,CAAC,EAIlB,OAHAC,OAAOC,QAAQH,GAASI,SAAQC,IAAmB,IAAjBC,EAAKT,GAAMQ,EAC5CJ,EAASJ,GAASS,CAAG,IAEfL,CAAQ,EAsDSM,CAAeT,GACvC,OAAOC,EAAgBF,EAAMW,gBAAkB,SAAS,EAGnDC,EAAeZ,GACNa,EAAiBb,IACf,UAGXc,EAAgBA,CAACd,EAAOC,EAAYc,KAEzC,MAAMC,EAAWf,EAA4B,gBACvCgB,EAAchB,EAAyB,aAC7C,IAAIiB,EAAajB,EAEjB,IAAK,IAAIkB,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IAAK,CACzC,MACME,EAAeN,EADLC,EAASG,IAErBE,IACHH,EAAaA,EAAWG,GAE1B,CAGA,MAAoB,OAAhBJ,EACIlB,EAASC,EAAOkB,GACG,QAAhBD,EACHK,SAAStB,EAAO,IACG,SAAhBiB,EACO,OAAVjB,EACmB,UAAhBiB,EACHL,EAAYZ,EAAMuB,oBADnB,CAEP,EAgCKC,EAAmBf,IAExB,OADiBA,EAAIgB,MAAM,KAAKC,OAE/B,IAAK,QACJ,OACC/D,EAAAA,EAAAA,MAAA,OAAKb,MAAO,CAAEgB,QAAS,OAAQE,WAAY,UAAWC,SAAA,EACrDpB,EAAAA,EAAAA,KAACL,EAAAA,EAAc,CACdE,MAAO+C,EAAiBgB,GAAKkB,IAC7B/E,OAAO,kBAEPgF,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,IAAqBpC,EAAiBgB,GAAKqB,QACvC,aAGR,IAAK,KACJ,OACCC,EAAAA,EAAAA,KACCH,EAAAA,EAAAA,KACCI,EAAAA,EAAAA,IACCvC,EAAiBgB,GAAKwB,eAGpB,UAEP,IAAK,MACJ,OAAOC,MAAMzC,EAAiBgB,IAAQ,UAAYhB,EAAiBgB,GACpE,IAAK,OACJ,OAAOhB,EAAiBgB,GAAO,MAAQ,KACxC,QACC,OAAOhB,EAAiBgB,GAC1B,EAGK0B,EAAoB1B,IAExB9C,EAAAA,EAAAA,MAAA,OACCyE,GAAG,kBAEHtF,MAAO,CACNgB,QAAS,OACTC,eAAgB,SAChBsE,IAAK,QACJpE,SAAA,EAEFN,EAAAA,EAAAA,MAAA,UAAAM,SAAA,EAAS8D,EAAAA,EAAAA,IAAqBtB,GAAK,QAAY,IAC9Ce,EAAgBf,KARZA,GA2BR,OACC9C,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEc,SAAU,IAAK/B,OAAQ,UAAWqB,SAAA,EAC5CN,EAAAA,EAAAA,MAAC2E,EAAAA,EAAOC,IAAG,CACVC,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BzD,WAAY,CAAE2D,SAAU,IAAM3E,SAAA,EAE9BpB,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CACTC,WAAS,EACTC,MAAM,aACN/C,MAAOT,EACPyD,SArF2BC,IAC9B,IAAIC,EAAaD,EAAME,OAAOnD,MAE1BkD,EAAWE,WAAW,QACzBF,EAAaA,EAAWG,UAAU,IAEnC7D,EAAa0D,EAAW,EAgFrBtG,OAAO,SACP0G,QAAQ,WACRC,WAAY,CACXC,cACC3G,EAAAA,EAAAA,KAAC4G,EAAAA,EAAc,CAACC,SAAS,MAAKzF,UAC7BpB,EAAAA,EAAAA,KAAC8G,EAAAA,EAAU,CACVC,QAhCYC,UACnB,IACC,IAAIC,QAAaC,UAAUC,UAAUC,WAEjCH,EAAKV,WAAW,QACnBU,EAAOA,EAAKT,UAAU,IAEvB7D,EAAasE,EACd,CAAE,MAAOrG,GACRyG,QAAQzG,MAAM,qCAAsCA,EACrD,GAuBO0G,KAAK,MACLC,MAAM,QACNvG,GAAI,CAAEnB,MAAO,WAAYuB,UAEzBpB,EAAAA,EAAAA,KAACwH,EAAAA,EAAY,QAIhBxG,GAAI,CACH,qCAAsC,CACrCyG,YAAa,WAEd,2CAA4C,CAC3CA,YAAa,WAEd,iDAAkD,CACjDA,YAAa,WAEd5H,MAAO,YAGT6H,gBAAiB,CAChB1G,GAAI,CAAEnB,MAAO,eAGfG,EAAAA,EAAAA,KAACqC,EAAgB,CAAC0E,QA1IAY,KACpB,IAAKjF,EAAW,OAEhB,MAAMkF,EAAiBlF,EAAUmF,MAAM,EAAG,GAAG/D,cAC7Cf,EAAgBL,GACUO,EAAP,OAAnB2E,GAEA,MAAME,EAAiBC,EAAAA,GAAuBH,GAC1CE,GACH,OAAO,KAADtG,OAAqBsG,EAAc,qBACvCE,MAAMpE,IACN,MAAMM,EAjGSN,KAClB,IAAIM,EAAiB,CAAC,EAClB+D,EAAkB,EAClBC,GAAoB,EA2CxB,OAxCA1E,OAAOC,QAAQG,EAAIuE,OAAOzE,SAAQ0E,IAAqB,IAAnBC,EAAM9D,GAAO6D,EAEhD,MAAME,EAAWL,EACXM,EAASD,EAAoB,EAAT/D,EACpBiE,EAAY9F,EAAUmF,MAAMS,EAAUC,GAM5C,GAHAN,GAA4B,EAAT1D,EAGf8D,EAAKI,SAAS,OACjBvE,EAAemE,GAAQnF,EAASsF,EAAW5E,EAAI,GAADpC,OAAI6G,EAAI,YAChD,GAAIA,EAAKI,SAAS,QACxBvE,EAAemE,GAAQ5D,SAAS+D,EAAW,SACrC,GAAIH,EAAKI,SAAS,SACxBvE,EAAemE,GAAsB,OAAdG,OACjB,GAAIH,EAAKI,SAAS,UACnBP,IACJA,GAAoB,EACpBhE,EAAemE,GAAQtE,EAAYyE,EAAU9D,qBAExC,GAAI2D,EAAKI,SAAS,YAAa,CACrC,MAAMC,EAASzE,EACduE,EACA5E,EAAI,GAADpC,OAAI6G,IACPnE,GAEc,YAAXwE,EACHxE,EAAemE,GAAQK,EAEvBR,GAAoB,CAEtB,MAAWG,EAAKI,SAAS,UAExBvE,EAAemE,GAAQ5D,SAAS+D,EAAW,IAC5C,IAKMtE,CAAc,EAmDKyE,CAAU/E,EAAIgF,SACrC/F,EAAoBqB,EAAe,IAEnC2E,OAAOjI,GACPyG,QAAQzG,MAAM,8BAA+BA,IAEhD,EAyH2CqF,WAAS,EAACjF,GAAI,CAAE8H,GAAI,EAAGC,GAAI,GAAI3H,SAAC,kBAKzE4B,IACAhD,EAAAA,EAAAA,KAACyF,EAAAA,EAAOC,IAAG,CACVC,QAAS,CAAEC,QAAS,EAAGoD,MAAO,IAC9BlD,QAAS,CAAEF,QAAS,EAAGoD,MAAO,GAC9B5G,WAAY,CAAE2D,SAAU,IAAM3E,UAE9BpB,EAAAA,EAAAA,KAACe,EAAAA,EAAG,CAACC,GAAI,CAAE8H,GAAI,EAAGC,GAAI,GAAI3H,UACzBpB,EAAAA,EAAAA,KAACiJ,EAAY,CAACzI,IAAKsC,QAKrBF,IACA5C,EAAAA,EAAAA,KAACyF,EAAAA,EAAOC,IAAG,CACVC,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BzD,WAAY,CAAE2D,SAAU,GAAKmD,MAAO,IAAM9H,UAE1CN,EAAAA,EAAAA,MAACkB,EAAY,CAACmH,UAAW,EAAGnI,GAAI,CAAEoI,EAAG,GAAIhI,SAAA,EACxCpB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACmF,QAAQ,KAAK4C,cAAY,EAACrI,GAAI,CAAEnB,MAAO,WAAYuB,SAAC,kBAGhEpB,EAAAA,EAAAA,KAACsJ,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEpI,SACzBoC,OAAOiG,KAAK7G,GAAkB8G,KAAK9F,IACnC5D,EAAAA,EAAAA,KAACsJ,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEzI,SACvBkE,EAAiB1B,IADYA,cAUvC,C,2ECtUA,MAAMkG,EAAe7C,QACJ8C,IAAT9C,GAAsC,kBAATA,EAGxBlC,EAAyBkC,GAChC6C,EAAY7C,GAIVA,EAAK+C,QAAQ,SAAU,OAHtB/C,EAMIjC,EAAwBiC,GAC/B6C,EAAY7C,GAIVA,EACLrC,MAAM,aACN8E,KAAKO,GAASA,EAAKC,OAAO,GAAGxF,cAAgBuF,EAAKpC,MAAM,KACxDsC,KAAK,KANClD,EASI9B,EAA+B8B,GACtC6C,EAAY7C,GAIVA,EAAK+C,QAAQ,QAAS,KAHrB/C,EAMI/B,EAAwB+B,GAC/B6C,EAAY7C,GAIVA,EACLrC,MAAM,KACN8E,KAAKO,GAASA,EAAKC,OAAO,GAAGxF,cAAgBuF,EAAKpC,MAAM,KACxDsC,KAAK,KANClD,C,gBCjCT,IAAIyC,EAAM,CACT,gCAAiC,CAChC,KACA,KAED,0BAA2B,CAC1B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,4BAA6B,CAC5B,IACA,KAED,2BAA4B,CAC3B,KACA,KAED,4BAA6B,CAC5B,KACA,KAED,4BAA6B,CAC5B,KACA,MAGF,SAASU,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEb,EAAKW,GAC9B,OAAOG,QAAQC,UAAUzC,MAAK,KAC7B,IAAI0C,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,CAAC,IAIT,IAAIG,EAAMnB,EAAIW,GAAM9E,EAAKsF,EAAI,GAC7B,OAAOP,EAAoBI,EAAEG,EAAI,IAAI7C,MAAK,IAClCsC,EAAoBQ,EAAEvF,EAAI,KAEnC,CACA6E,EAAoBX,KAAO,IAAOjG,OAAOiG,KAAKC,GAC9CU,EAAoB7E,GAAK,IACzBwF,EAAOC,QAAUZ,C","sources":["components/ColorIndicator.jsx","components/PersonaImage.jsx","components/DNADecoder.jsx","util.js","data/DNA_keys|lazy|/^/.*_DNA_key_v1/.json$/|groupOptions: {}|namespace object"],"sourcesContent":["/**\r\n * ColorIndicator generates a circular color indicator\r\n *\r\n * @param {string} props.color - The fill color of the indicator.\r\n * @param {string} props.height - The height of the indicator (aspect ratio = 1).\r\n * @param {string} props.margin - The margin around the indicator (https://developer.mozilla.org/en-US/docs/Web/CSS/margin).\r\n * @returns {JSX.Element} styled \\<div> element.\r\n */\r\nfunction ColorIndicator({ color, height, margin }) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundColor: color,\r\n\t\t\t\tborder: '2px solid rgba(255, 255, 255, 0.5)',\r\n\t\t\t\taspectRatio: '1',\r\n\t\t\t\theight,\r\n\t\t\t\tborderRadius: '50%',\r\n\t\t\t\tmargin,\r\n\t\t\t\tboxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nColorIndicator.defaultProps = {\r\n\tcolor: 'transparent',\r\n\theight: '1.5rem',\r\n\tmargin: '0',\r\n};\r\n\r\nexport default ColorIndicator;\r\n","import React, { useState } from 'react';\r\nimport { CircularProgress, Typography, Box } from '@mui/material';\r\n\r\nfunction PersonaImage({ dna }) {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [error, setError] = useState(false);\r\n\r\n\tconst handleLoad = () => {\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst handleError = () => {\r\n\t\tsetLoading(false);\r\n\t\tsetError(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 300 }}>\r\n\t\t\t{loading && <CircularProgress />}\r\n\t\t\t{error ? (\r\n\t\t\t\t<Typography color=\"error\">Couldn't find persona photo</Typography>\r\n\t\t\t) : (\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={`https://5x1vj0debk.execute-api.us-east-1.amazonaws.com/default/fetch_persona_photo_from_dna?dna=0x${dna}`}\r\n\t\t\t\t\talt=\"Persona\"\r\n\t\t\t\t\tonLoad={handleLoad}\r\n\t\t\t\t\tonError={handleError}\r\n\t\t\t\t\tstyle={{ display: loading ? 'none' : 'block', maxWidth: '100%', maxHeight: '100%' }}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nexport default PersonaImage;\r\n","// DNADecoder.js\r\nimport React, { useState } from 'react';\r\nimport {\r\n\tTextField,\r\n\tButton,\r\n\tTypography,\r\n\tInputAdornment,\r\n\tIconButton,\r\n\tBox,\r\n\tPaper,\r\n\tGrid,\r\n} from '@mui/material';\r\nimport ContentPaste from '@mui/icons-material/ContentPaste';\r\nimport geneColorPalette from '../data/gene_color_pallet.json';\r\nimport protocolVersions from '../data/protocol_versions.json';\r\nimport {\r\n\treplaceDashesAndUnderscores,\r\n\taddSpaceBeforeNumbers,\r\n\tcamelCaseToTitleCase,\r\n\tsnakeCaseToTitleCase,\r\n} from '../util';\r\nimport ColorIndicator from './ColorIndicator';\r\nimport PersonaImage from './PersonaImage';\r\nimport { motion } from 'framer-motion';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst GlowingPaper = styled(Paper)(({ theme }) => ({\r\n\tbackgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n\tboxShadow: '0 0 10px rgba(0, 255, 255, 0.5)',\r\n\ttransition: 'box-shadow 0.3s ease-in-out',\r\n\t'&:hover': {\r\n\t\tboxShadow: '0 0 20px rgba(0, 255, 255, 0.8)',\r\n\t},\r\n}));\r\n\r\nconst FuturisticButton = styled(Button)(({ theme }) => ({\r\n\tbackground: 'linear-gradient(45deg, #00ffff 30%, #0088ff 90%)',\r\n\tborder: 0,\r\n\tborderRadius: 3,\r\n\tboxShadow: '0 3px 5px 2px rgba(0, 255, 255, .3)',\r\n\tcolor: '#000000',\r\n\theight: 48,\r\n\tpadding: '0 30px',\r\n\ttransition: 'all 0.3s ease-in-out',\r\n\t'&:hover': {\r\n\t\tboxShadow: '0 6px 10px 4px rgba(0, 255, 255, .5)',\r\n\t},\r\n}));\r\n\r\nfunction DNADecoder() {\r\n\tconst [dnaString, setDnaString] = useState('');\r\n\tconst [localDecodedData, setLocalDecodedData] = useState(null);\r\n\tconst [submittedDNA, setSubmittedDNA] = useState('');\r\n\tconst [isPersonaImageOpen, setIsPersonaImageOpen] = useState(false);\r\n\r\n\tconst reverseMapping = (mapping) => {\r\n\t\tconst reversed = {};\r\n\t\tObject.entries(mapping).forEach(([key, value]) => {\r\n\t\t\treversed[value] = key;\r\n\t\t});\r\n\t\treturn reversed;\r\n\t};\r\n\r\n\tconst decodeDNA = (key) => {\r\n\t\tlet decodedResults = {};\r\n\t\tlet currentPosition = 0;\r\n\t\tlet lastIsVoidCascade = false;\r\n\r\n\t\t// Iterate over each gene in the DNA key\r\n\t\tObject.entries(key.genes).forEach(([gene, length]) => {\r\n\t\t\t// Extract the part of the DNA string for this gene\r\n\t\t\tconst startPos = currentPosition; // Calculate the start position for this gene\r\n\t\t\tconst endPos = startPos + length * 2; // Calculate the end position\r\n\t\t\tconst geneValue = dnaString.slice(startPos, endPos);\r\n\r\n\t\t\t// Update the current position\r\n\t\t\tcurrentPosition += length * 2;\r\n\r\n\t\t\t// Decode based on gene type\r\n\t\t\tif (gene.endsWith('_id')) {\r\n\t\t\t\tdecodedResults[gene] = decodeId(geneValue, key[`${gene}s`]);\r\n\t\t\t} else if (gene.endsWith('_int')) {\r\n\t\t\t\tdecodedResults[gene] = parseInt(geneValue, 16);\r\n\t\t\t} else if (gene.endsWith('_bool')) {\r\n\t\t\t\tdecodedResults[gene] = geneValue === '01';\r\n\t\t\t} else if (gene.endsWith('_color')) {\r\n\t\t\t\tif (!lastIsVoidCascade) {\r\n\t\t\t\t\tlastIsVoidCascade = false;\r\n\t\t\t\t\tdecodedResults[gene] = decodeColor(geneValue.toUpperCase());\r\n\t\t\t\t}\r\n\t\t\t} else if (gene.endsWith('_cascade')) {\r\n\t\t\t\tconst result = decodeCascade(\r\n\t\t\t\t\tgeneValue,\r\n\t\t\t\t\tkey[`${gene}`],\r\n\t\t\t\t\tdecodedResults,\r\n\t\t\t\t);\r\n\t\t\t\tif (result !== 'Unknown') {\r\n\t\t\t\t\tdecodedResults[gene] = result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlastIsVoidCascade = true;\r\n\t\t\t\t}\r\n\t\t\t} else if (gene.endsWith('_tkn')) {\r\n\t\t\t\t// For now, just decode as int\r\n\t\t\t\tdecodedResults[gene] = parseInt(geneValue, 16);\r\n\t\t\t}\r\n\t\t\t// TODO: ADD TKN and function decode (function can wait)\r\n\t\t\t// TODO: Add more decoding logic for other gene types\r\n\t\t});\r\n\r\n\t\treturn decodedResults;\r\n\t};\r\n\r\n\t// Example decoding functions\r\n\tconst decodeId = (value, keyMapping) => {\r\n\t\tconst reversedMapping = reverseMapping(keyMapping);\r\n\t\treturn reversedMapping[value.toLowerCase()] || 'Unknown';\r\n\t};\r\n\r\n\tconst decodeColor = (value) => {\r\n\t\tconst color = geneColorPalette[value];\r\n\t\treturn color || 'Unknown';\r\n\t};\r\n\r\n\tconst decodeCascade = (value, keyMapping, decodedResults) => {\r\n\t\t// First, get the reference gene for the cascade\r\n\t\tconst refGenes = keyMapping['reference_genes'];\r\n\t\tconst cascadeType = keyMapping['cascade_type'];\r\n\t\tlet currentKey = keyMapping;\r\n\t\t// itterate over the reference genes\r\n\t\tfor (let i = 0; i < refGenes.length; i++) {\r\n\t\t\tconst refGene = refGenes[i];\r\n\t\t\tconst refGeneValue = decodedResults[refGene];\r\n\t\t\tif (refGeneValue) {\r\n\t\t\t\tcurrentKey = currentKey[refGeneValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Now you should be at the end cascade\r\n\t\t// TODO: seperate this out from both decode DNA and decode Cascade as a seperate function\r\n\t\tif (cascadeType === 'id') {\r\n\t\t\treturn decodeId(value, currentKey);\r\n\t\t} else if (cascadeType === 'int') {\r\n\t\t\treturn parseInt(value, 16);\r\n\t\t} else if (cascadeType === 'bool') {\r\n\t\t\treturn value === '01';\r\n\t\t} else if (cascadeType === 'color') {\r\n\t\t\treturn decodeColor(value.toUpperCase());\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSubmit = () => {\r\n\t\tif (!dnaString) return;\r\n\r\n\t\tconst collectionGene = dnaString.slice(4, 6).toLowerCase();\r\n\t\tsetSubmittedDNA(dnaString);\r\n\t\tcollectionGene === '01' ? setIsPersonaImageOpen(true) : setIsPersonaImageOpen(false);\r\n\r\n\t\tconst collectionType = protocolVersions['v1'][collectionGene];\r\n\t\tif (collectionType) {\r\n\t\t\timport(`../data/DNA_keys/${collectionType}_DNA_key_v1.json`)\r\n\t\t\t\t.then((key) => {\r\n\t\t\t\t\tconst decodedResults = decodeDNA(key.default);\r\n\t\t\t\t\tsetLocalDecodedData(decodedResults);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) =>\r\n\t\t\t\t\tconsole.error('Error loading DNA key file:', error),\r\n\t\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleDnaStringChange = (event) => {\r\n\t\tlet inputValue = event.target.value;\r\n\t\t// Check if the input starts with \"0x\" and remove it\r\n\t\tif (inputValue.startsWith('0x')) {\r\n\t\t\tinputValue = inputValue.substring(2);\r\n\t\t}\r\n\t\tsetDnaString(inputValue);\r\n\t};\r\n\r\n\tconst renderGeneByKey = (key) => {\r\n\t\tconst geneType = key.split('_').pop();\r\n\t\tswitch (geneType) {\r\n\t\t\tcase 'color':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{ display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t<ColorIndicator\r\n\t\t\t\t\t\t\tcolor={localDecodedData[key].hex}\r\n\t\t\t\t\t\t\tmargin='0 0.5rem 0 0'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{addSpaceBeforeNumbers(\r\n\t\t\t\t\t\t\tcamelCaseToTitleCase(localDecodedData[key].name),\r\n\t\t\t\t\t\t) || 'Unknown'}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\tcase 'id':\r\n\t\t\t\treturn (\r\n\t\t\t\t\tsnakeCaseToTitleCase(\r\n\t\t\t\t\t\taddSpaceBeforeNumbers(\r\n\t\t\t\t\t\t\treplaceDashesAndUnderscores(\r\n\t\t\t\t\t\t\t\tlocalDecodedData[key].toString(),\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t) || 'Unknown'\r\n\t\t\t\t);\r\n\t\t\tcase 'int':\r\n\t\t\t\treturn isNaN(localDecodedData[key]) ? 'Unknown' : localDecodedData[key];\r\n\t\t\tcase 'bool':\r\n\t\t\t\treturn localDecodedData[key] ? 'Yes' : 'No';\r\n\t\t\tdefault:\r\n\t\t\t\treturn localDecodedData[key];\r\n\t\t}\r\n\t};\r\n\r\n\tconst renderDNAMapping = (key) => {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tid='decoder-results'\r\n\t\t\t\tkey={key}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\tgap: '1rem',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<strong>{snakeCaseToTitleCase(key)}: </strong>{' '}\r\n\t\t\t\t{renderGeneByKey(key)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tconst handlePaste = async () => {\r\n\t\ttry {\r\n\t\t\tlet text = await navigator.clipboard.readText();\r\n\t\t\t// Remove \"0x\" from the start of the text if present\r\n\t\t\tif (text.startsWith('0x')) {\r\n\t\t\t\ttext = text.substring(2);\r\n\t\t\t}\r\n\t\t\tsetDnaString(text);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to read clipboard contents:', error);\r\n\t\t}\r\n\t};\r\n\t\r\n\r\n\treturn (\r\n\t\t<Box sx={{ maxWidth: 600, margin: '0 auto' }}>\r\n\t\t\t<motion.div\r\n\t\t\t\tinitial={{ opacity: 0, y: 20 }}\r\n\t\t\t\tanimate={{ opacity: 1, y: 0 }}\r\n\t\t\t\ttransition={{ duration: 0.5 }}\r\n\t\t\t>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tlabel='DNA String'\r\n\t\t\t\t\tvalue={dnaString}\r\n\t\t\t\t\tonChange={handleDnaStringChange}\r\n\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\tendAdornment: (\r\n\t\t\t\t\t\t\t<InputAdornment position='end'>\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\tonClick={handlePaste}\r\n\t\t\t\t\t\t\t\t\tedge='end'\r\n\t\t\t\t\t\t\t\t\ttitle='Paste'\r\n\t\t\t\t\t\t\t\t\tsx={{ color: '#00ffff' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<ContentPaste />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t</InputAdornment>\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tsx: {\r\n\t\t\t\t\t\t\t'& .MuiOutlinedInput-notchedOutline': {\r\n\t\t\t\t\t\t\t\tborderColor: '#00ffff',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'&:hover .MuiOutlinedInput-notchedOutline': {\r\n\t\t\t\t\t\t\t\tborderColor: '#0088ff',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n\t\t\t\t\t\t\t\tborderColor: '#00ffff',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcolor: '#00ffff',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\tsx: { color: '#00ffff' },\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<FuturisticButton onClick={handleSubmit} fullWidth sx={{ mt: 2, mb: 4 }}>\r\n\t\t\t\t\tDecode DNA\r\n\t\t\t\t</FuturisticButton>\r\n\t\t\t</motion.div>\r\n\r\n\t\t\t{isPersonaImageOpen && (\r\n\t\t\t\t<motion.div\r\n\t\t\t\t\tinitial={{ opacity: 0, scale: 0.8 }}\r\n\t\t\t\t\tanimate={{ opacity: 1, scale: 1 }}\r\n\t\t\t\t\ttransition={{ duration: 0.5 }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Box sx={{ mt: 2, mb: 4 }}>\r\n\t\t\t\t\t\t<PersonaImage dna={submittedDNA} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</motion.div>\r\n\t\t\t)}\r\n\r\n\t\t\t{localDecodedData && (\r\n\t\t\t\t<motion.div\r\n\t\t\t\t\tinitial={{ opacity: 0, y: 20 }}\r\n\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\r\n\t\t\t\t\ttransition={{ duration: 0.5, delay: 0.2 }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<GlowingPaper elevation={3} sx={{ p: 3 }}>\r\n\t\t\t\t\t\t<Typography variant='h5' gutterBottom sx={{ color: '#00ffff' }}>\r\n\t\t\t\t\t\t\tDecoded Data\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t\t{Object.keys(localDecodedData).map((key) => (\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} sm={6} key={key}>\r\n\t\t\t\t\t\t\t\t\t{renderDNAMapping(key)}\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</GlowingPaper>\r\n\t\t\t\t</motion.div>\r\n\t\t\t)}\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nexport default DNADecoder;\r\n","const isValidText = (text) => {\r\n\treturn text !== undefined && typeof text === 'string';\r\n};\r\n\r\nexport const addSpaceBeforeNumbers = (text) => {\r\n\tif (!isValidText(text)) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn text.replace(/(\\d+)/g, ' $1');\r\n};\r\n\r\nexport const camelCaseToTitleCase = (text) => {\r\n\tif (!isValidText(text)) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn text\r\n\t\t.split(/(?=[A-Z])/)\r\n\t\t.map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n\t\t.join(' ');\r\n};\r\n\r\nexport const replaceDashesAndUnderscores = (text) => {\r\n\tif (!isValidText(text)) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn text.replace(/[_-]/g, ' ');\r\n};\r\n\r\nexport const snakeCaseToTitleCase = (text) => {\r\n\tif (!isValidText(text)) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn text\r\n\t\t.split('_')\r\n\t\t.map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n\t\t.join(' ');\r\n};\r\n\r\nexport const toTitleCase = (text) => {\r\n\tif (!isValidText(text)) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\treturn text.replace(/\\w\\S*/g, function (match) {\r\n\t\treturn match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\r\n\t});\r\n};\r\n","var map = {\n\t\"./accessories_DNA_key_v1.json\": [\n\t\t2309,\n\t\t309\n\t],\n\t\"./armor_DNA_key_v1.json\": [\n\t\t8708,\n\t\t708\n\t],\n\t\"./avatar_DNA_key_v1.json\": [\n\t\t9969,\n\t\t969\n\t],\n\t\"./persona_DNA_key_v1.json\": [\n\t\t935,\n\t\t935\n\t],\n\t\"./photon_DNA_key_v1.json\": [\n\t\t6266,\n\t\t266\n\t],\n\t\"./voucher_DNA_key_v1.json\": [\n\t\t2452,\n\t\t452\n\t],\n\t\"./weapons_DNA_key_v1.json\": [\n\t\t7987,\n\t\t987\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 745;\nmodule.exports = webpackAsyncContext;"],"names":["ColorIndicator","_ref","color","height","margin","_jsx","style","backgroundColor","border","aspectRatio","borderRadius","boxShadow","defaultProps","dna","loading","setLoading","useState","error","setError","_jsxs","Box","sx","display","justifyContent","alignItems","children","CircularProgress","Typography","src","concat","alt","onLoad","handleLoad","onError","handleError","maxWidth","maxHeight","GlowingPaper","styled","Paper","theme","transition","FuturisticButton","Button","_ref2","background","padding","dnaString","setDnaString","localDecodedData","setLocalDecodedData","submittedDNA","setSubmittedDNA","isPersonaImageOpen","setIsPersonaImageOpen","decodeId","value","keyMapping","reversedMapping","mapping","reversed","Object","entries","forEach","_ref3","key","reverseMapping","toLowerCase","decodeColor","geneColorPalette","decodeCascade","decodedResults","refGenes","cascadeType","currentKey","i","length","refGeneValue","parseInt","toUpperCase","renderGeneByKey","split","pop","hex","addSpaceBeforeNumbers","camelCaseToTitleCase","name","snakeCaseToTitleCase","replaceDashesAndUnderscores","toString","isNaN","renderDNAMapping","id","gap","motion","div","initial","opacity","y","animate","duration","TextField","fullWidth","label","onChange","event","inputValue","target","startsWith","substring","variant","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","async","text","navigator","clipboard","readText","console","edge","title","ContentPaste","borderColor","InputLabelProps","handleSubmit","collectionGene","slice","collectionType","protocolVersions","then","currentPosition","lastIsVoidCascade","genes","_ref4","gene","startPos","endPos","geneValue","endsWith","result","decodeDNA","default","catch","mt","mb","scale","PersonaImage","delay","elevation","p","gutterBottom","Grid","container","spacing","keys","map","item","xs","sm","isValidText","undefined","replace","word","charAt","join","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","t","module","exports"],"sourceRoot":""}